import processing.serial.*;
import processing.sound.*;
import processing.video.*;
import beads.*;

Serial threadPort;
PFont f;

int numsounds = 5;
String[] strs = {"hopeful", "euphoric", "empowered", "melancholic", "yearning", "isolated", "sinking"};
float[] freqs = {261.63, 311.13, 329.63, 349.23, 392.00, 440.00, 466.16};
color[] colors = {0xE6ffcfa0, 0xE6dfc8f4, 0xE6ffab93, 0xE6586984, 0xE68aadd1, 0xE6627055, 0xE6753c4f};
PImage[] images;
Glide[] glides;


void setup() {
  size(1300, 750);
  threadPort = new Serial(this, Serial.list()[2], 9600);
  f = createFont("SourceCodePro-Regular.ttf", 24);
  AudioContext ac = new AudioContext();
  glides = new Glide[7];
  images = new PImage[7];
  for (int i = 0; i < 7; i++) {
    WavePlayer wp = new WavePlayer(ac, freqs[i], Buffer.SINE);
    Glide gainGlide = new Glide(ac, 0.0, 50);
    Gain g = new Gain(ac, 1, gainGlide);
    g.addInput(wp);
    ac.out.addInput(g);
    glides[i] = gainGlide;
    PImage image = loadImage(strs[i] + ".jpg");
    image.resize(600, 0);
    images[i] = image;
    
  }
  ac.start();
  noStroke();
}

void draw() {
  if (threadPort.available() > 0) {
    String input = threadPort.readStringUntil('\n');
    if (input != null && input.contains(",")) {
      fill(255);
      rect(0, 0, width, height);
      String[] inputs = input.split(",");
      for (String in : inputs) {
        in = in.trim();
        in = in.replace("null", "");
        if (in.length() > 1) {
          int type = int(in.substring(0,1));
          String inputVal = in.substring(1);
          int degree = int(inputVal.trim());
          if (degree > 750) {
            drawStr(type);
            //fill(colors[type]);
            //rect(100*type, 200, 300, 300);
            image(images[type], (width / 2) - 300, 150);
          }
          updateOutput(type, degree);
        }
      }
    }
  }
  delay(50);
}

void drawStr(int index) {
  textAlign(CENTER);
  textSize(15); 
  fill(0);
  text(strs[index], (width / 8) * (index + 1), height - 75);
}

void updateOutput(int type, int degree) {
  Glide glide = glides[type];
  if (degree > 750) {
    glide.setValue(Math.min(1.0*degree/10000, .2));
  } else {
    glide.setValue(0.0);
  }
}

void movieEvent(Movie m) {
  m.read();
}